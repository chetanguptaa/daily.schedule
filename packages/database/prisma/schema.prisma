// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTEF
}

enum ReservedSlotStatus {
  RESERVED
  NOT_RESERVED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  accessToken  String?    @unique
  refreshToken String?    @unique
  picture      String
  createdAt    DateTime   @default(now())
  schedules    Schedule[]
  events       Event[]
}

model Schedule {
  id             String         @id @default(uuid())
  userId         String
  title          String
  timezone       String         @default("Asia/Calcutta")
  default        Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  availabilities Availability[]
  events         Event[]
}

model Availability {
  id         String    @id @default(uuid())
  scheduleId String
  dayOfWeek  DayOfWeek
  /**
   * startTime and endTime is a big timeframe lets say a user will say he is free from
   * 9am to 5pm in that time frame we can multiple events.
   */
  startTime  String
  endTime    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  schedule   Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model Event {
  id            String         @id @default(uuid())
  platformId    String
  scheduleId    String
  userId        String
  title         String
  description   String         @default("")
  duration      Int            @default(15)
  link          String
  platform      Platform       @relation(fields: [platformId], references: [id])
  schedule      Schedule       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id])
  bookings      Booking[]
  reservedSlots ReservedSlot[]
}

model Booking {
  id          String        @id @default(uuid())
  eventId     String
  guestName   String
  guestEmail  String
  guestNotes  String?
  dayOfWeek   DayOfWeek
  startTime   String
  endTime     String
  meetingDate DateTime
  meetingLink String
  otherGuests Json[]
  status      BookingStatus @default(PENDING)
  event       Event         @relation(fields: [eventId], references: [id])
}

model ReservedSlot {
  id           String             @id @default(uuid())
  eventId      String
  reservedBy   String
  startTime    String
  endTime      String
  dayOfWeek    DayOfWeek
  status       ReservedSlotStatus @default(RESERVED)
  reservedTill DateTime
  event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Platform {
  id      String  @id @default(uuid())
  name    String
  default Boolean @default(false)
  events  Event[]
}
